<UserControl x:Class="CifarInventario.Views.CustomControl.MenuControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:CifarInventario.Views.CustomControl"
             xmlns:vm="clr-namespace:CifarInventario.ViewModels"
             mc:Ignorable="d" x:Name="this" Background="WhiteSmoke"
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.DataContext>
        <vm:NavigationMenuVM/>
    </UserControl.DataContext>


    <UserControl.Resources>
        
        <Thickness x:Key="DefaultSubMenuPadding" Left="20"/>

        <Style x:Key="MenuTextStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>

            <!--to change fore ground on MouseOver and Menu Item Selection-->
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                    <Setter Property="Foreground" Value="#515EC1"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                    <Setter Property="Foreground" Value="#515EC1"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                    <Setter Property="Foreground" Value="#515EC1"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                    <Setter Property="Foreground" Value="#515EC1"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="SubMenuTextStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>

            <!--to change fore ground on MouseOver and Menu Item Selection-->
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="MenuButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Height" Value="30"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                            <!--Adding Icon & Text in our Button-->
                            <Grid Margin="5,0,5,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Style="{StaticResource MenuTextStyle}" Grid.Column="1" Text="{TemplateBinding Content}"/>

                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SubMenuButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="white"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="FontSize" Value="10"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                            <!--Adding Icon & Text in our Button-->
                            <Grid Margin="5,0,5,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Style="{StaticResource SubMenuTextStyle}" Grid.Column="1" Text="{TemplateBinding Content}"/>

                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <!--#region Customizing Listbox & ListboxItems-->
        <Style TargetType="{x:Type ListBox}">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="#515EC1"/>
            <Setter Property="SelectionMode" Value="Single"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="SelectedIndex" Value="0"/>
            <Style.Triggers>
                <!--To Hide SubMenu List When the Parent Menu button is Unchecked-->
                <DataTrigger Binding="{Binding IsChecked, ElementName=Menu}" Value="False">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>

                <!--And also to hide when the SubMenu List coming from our ViewModel is null-->
                <DataTrigger Binding="{Binding SubMenuList}" Value="{x:Null}">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type ListBoxItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border Padding="15,0,0,0">

                        <!--You might be thinking why we are using RadioButton instead of Normal Button here... Well, there are 2 reasons for that
                    1) Radio Buttons have GroupName property which will help us achieve one selection of button at a time.. i will show you later what 
                    i mean by that...
                    2) Radio buttons have IsChecked property which we can use to benefit for collapsing / showing our SubMenus
                            
                            ;)
                    -->
                            <RadioButton
                                x:Name="SMenuButton"
                                GroupName="SubMenu"
                                Style="{StaticResource SubMenuButtonStyle}"
                                Content="{Binding SubMenuText, FallbackValue=MenuText, TargetNullValue=MenuText}"
                                Command="{Binding SubMenuCommand}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--To select ListboxItem when our button is in Checked State-->
                            <DataTrigger Binding="{Binding IsChecked, ElementName=SMenuButton}" Value="True">
                                <Setter Property="IsSelected" Value="True"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->
    </UserControl.Resources>
    <ItemsControl ItemsSource="{Binding MenuList}"
        ScrollViewer.VerticalScrollBarVisibility="Disabled"
        ScrollViewer.HorizontalScrollBarVisibility="Disabled">
        <ItemsControl.ItemTemplate>
            <DataTemplate>
                <StackPanel>
                    <!--Main Menu Button-->
                    <!--You might be thinking why we are using RadioButton instead of Normal Button here... Well, there are 2 reasons for that
                    1) Radio Buttons have GroupName property which will help us achieve one selection of button at a time.. i will show you later what 
                    i mean by that...
                    2) Radio buttons have IsChecked property which we can use to benefit for collapsing / showing our SubMenus
                    -->
                    <RadioButton x:Name="Menu"
                                 Content="{Binding MenuText}"
                                 GroupName="MainMenu"
                                 Style="{StaticResource MenuButtonStyle}"
                                 Command="{Binding Command}"/>

                    <!--Sub Menu Listbox-->
                    <ListBox
                        ItemsSource="{Binding SubMenuList}"
                        ScrollViewer.VerticalScrollBarVisibility="Disabled"
                        ScrollViewer.HorizontalScrollBarVisibility="Disabled"                       
                        />

                </StackPanel>
            </DataTemplate>
        </ItemsControl.ItemTemplate>
    </ItemsControl>
</UserControl>